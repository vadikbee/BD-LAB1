import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–ú–ü–û–†–¢–ò–†–£–ï–ú CATBOOST –î–õ–Ø –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –¢–û–ß–ù–û–°–¢–ò ---
import catboost as cb
from sklearn.metrics import roc_auc_score, confusion_matrix, accuracy_score
import warnings
import time

warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∞–Ω–∫–∞", page_icon="üå∏", layout="wide")

# –ö–∞—Å—Ç–æ–º–Ω—ã–π CSS
st.markdown("""
<style>
    .main { background-color: #FFF0F5; }
    .stButton>button { background-color: #FFB6C1; color: #8B0000; border-radius: 10px; border: 1px solid #DB7093; }
    .stButton>button:hover { background-color: #DB7093; color: white; }
    h1, h2, h3 { color: #8B0000; font-family: 'Arial', sans-serif; }
</style>
""", unsafe_allow_html=True)

st.markdown("<h1 style='text-align: center; color: #8B0000;'>üå∏ –ê–Ω–∞–ª–∏–∑ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∞–Ω–∫–∞ üå∏</h1>",
            unsafe_allow_html=True)
st.markdown(
    "<p style='text-align: center; color: #DB7093;'>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ö–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è</p>",
    unsafe_allow_html=True)


# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–†–ò–ó–ù–ê–ö–û–í ---
def engineer_features(df):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏."""
    df_copy = df.copy()

    # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –∏ —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df_copy['Age_x_Tenure'] = df_copy['Age'] * df_copy['Tenure']
    df_copy['CreditScore_x_Age'] = df_copy['CreditScore'] * df_copy['Age']

    # –ü—Ä–∏–∑–Ω–∞–∫–∏-–æ—Ç–Ω–æ—à–µ–Ω–∏—è
    df_copy['BalanceSalaryRatio'] = df_copy['Balance'] / (df_copy['EstimatedSalary'] + 1e-6)
    df_copy['TenureAgeRatio'] = df_copy['Tenure'] / (df_copy['Age'] + 1e-6)
    df_copy['CreditScoreAgeRatio'] = df_copy['CreditScore'] / (df_copy['Age'] + 1e-6)

    # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≥–µ–æ–≥—Ä–∞—Ñ–∏–µ–π (–æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫)
    if 'Germany' in df_copy.columns:
        df_copy['Germany_x_Balance'] = df_copy['Germany'] * df_copy['Balance']
        df_copy['Germany_x_Age'] = df_copy['Germany'] * df_copy['Age']

    # –ë–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–ª–∞–≥–∏
    df_copy['IsBalanceZero'] = (df_copy['Balance'] == 0).astype(int)
    df_copy['IsSenior'] = (df_copy['Age'] >= 60).astype(int)

    # –ó–∞–º–µ–Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ NaN
    df_copy.replace([np.inf, -np.inf], 0, inplace=True)
    df_copy.fillna(0, inplace=True)

    return df_copy


@st.cache_data
def load_and_prepare_data():
    try:
        try:
            train_df = pd.read_csv('bank_train.csv')
            valid_df = pd.read_csv('bank_valid.csv')
        except FileNotFoundError:
            st.warning("–§–∞–π–ª—ã 'bank_train.csv' –∏ 'bank_valid.csv' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'finance_new.csv'.")
            df_full = pd.read_csv('finance_new.csv')
            train_df, valid_df = train_test_split(df_full, test_size=0.2, random_state=42,
                                                  stratify=df_full.get('Exited'))

        prepared_dfs = {}
        for name, df in {'train': train_df, 'valid': valid_df}.items():
            df_copy = df.copy()
            for col in df_copy.columns:
                if df_copy[col].dtype == 'object':
                    df_copy[col] = pd.to_numeric(df_copy[col].str.replace('.', '', regex=False), errors='coerce')
            base_features = ['CreditScore', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'HasCrCard', 'IsActiveMember',
                             'EstimatedSalary', 'Exited', 'France', 'Germany', 'Spain', 'Female', 'Male']
            cols_to_keep = [col for col in base_features if col in df_copy.columns]
            df_copy = df_copy[cols_to_keep]
            for col in df_copy.columns:
                if df_copy[col].isnull().any():
                    df_copy[col].fillna(df_copy[col].median(), inplace=True)
            df_featured = engineer_features(df_copy)
            prepared_dfs[name] = df_featured
        return prepared_dfs['train'], prepared_dfs['valid']
    except FileNotFoundError:
        st.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª 'finance_new.csv'. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã.")
        return None, None


train_df_featured, valid_df_featured = load_and_prepare_data()

if train_df_featured is not None:
    numerical_cols = [col for col in train_df_featured.select_dtypes(include=np.number).columns if
                      col not in ['Exited']]

    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    tab1, tab2, tab3, tab4 = st.tabs(["üìä –î–∞–Ω–Ω—ã–µ", "ü§ñ –û–±—É—á–µ–Ω–∏–µ", "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üéØ –ü—Ä–æ–≥–Ω–æ–∑"])
    with tab1:
        st.header("–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")
        st.dataframe(train_df_featured.head())

    with tab2:
        st.header("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")

        X_train = train_df_featured.drop('Exited', axis=1)
        y_train = train_df_featured['Exited']
        X_valid = valid_df_featured.drop('Exited', axis=1, errors='ignore').reindex(columns=X_train.columns,
                                                                                    fill_value=0)
        y_valid = valid_df_featured['Exited']

        st.session_state.X_columns = X_train.columns

        with st.spinner("–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."):
            scaler = StandardScaler()
            st.session_state.numerical_cols = [col for col in numerical_cols if col in X_train.columns]
            X_train[st.session_state.numerical_cols] = scaler.fit_transform(X_train[st.session_state.numerical_cols])
            X_valid[st.session_state.numerical_cols] = scaler.transform(X_valid[st.session_state.numerical_cols])
            st.session_state.scaler = scaler
        st.success("–î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã!")

        with st.spinner('–û–±—É—á–µ–Ω–∏–µ CatBoost –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...'):
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: CATBOOST –° –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò –î–õ–Ø –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –¢–û–ß–ù–û–°–¢–ò ---
            cat_model = cb.CatBoostClassifier(
                iterations=2500,
                learning_rate=0.03,
                depth=7,
                l2_leaf_reg=3,
                loss_function='Logloss',
                eval_metric='Accuracy',
                random_seed=42,
                verbose=0,
                early_stopping_rounds=50
            )
            cat_model.fit(X_train, y_train, eval_set=(X_valid, y_valid))
            st.session_state.model = cat_model
        st.success(f"–ú–æ–¥–µ–ª—å CatBoost –æ–±—É—á–µ–Ω–∞! –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: {cat_model.get_best_iteration()}")

    with tab3:
        st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ")
        if 'model' in st.session_state:
            X_valid_eval = valid_df_featured.drop('Exited', axis=1, errors='ignore').reindex(
                columns=st.session_state.X_columns, fill_value=0)
            y_valid_eval = valid_df_featured['Exited']
            X_valid_eval[st.session_state.numerical_cols] = st.session_state.scaler.transform(
                X_valid_eval[st.session_state.numerical_cols])

            start_time = time.time()
            y_pred_valid = st.session_state.model.predict(X_valid_eval)
            prediction_time = time.time() - start_time
            y_pred_proba_valid = st.session_state.model.predict_proba(X_valid_eval)[:, 1]

            st.subheader("–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("**Accuracy**", f"{accuracy_score(y_valid_eval, y_pred_valid):.4f}",
                          help="–î–æ–ª—è –≤–µ—Ä–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.")
            with col2:
                st.metric("**ROC-AUC Score**", f"{roc_auc_score(y_valid_eval, y_pred_proba_valid):.4f}",
                          help="–ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏, —á–µ–º –±–ª–∏–∂–µ –∫ 1, —Ç–µ–º –ª—É—á—à–µ.")
            with col3:
                st.metric("**–í—Ä–µ–º—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è**", f"{prediction_time:.4f} —Å–µ–∫")
            st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
            cm = confusion_matrix(y_valid_eval, y_pred_valid)
            st.plotly_chart(
                px.imshow(cm, text_auto=True, labels=dict(x="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", y="–ò—Å—Ç–∏–Ω–∞"), color_continuous_scale='Reds'),
                use_container_width=True)
        else:
            st.warning("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞.")

    with tab4:
        st.header("üéØ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
        if 'model' in st.session_state:
            with st.form("prediction_form"):
                # –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                col1, col2, col3 = st.columns(3)
                with col1:
                    CreditScore = st.slider("–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥", 300, 850, 650)
                    Age = st.slider("–í–æ–∑—Ä–∞—Å—Ç", 18, 100, 38)
                    Geography = st.selectbox("–°—Ç—Ä–∞–Ω–∞", ["France", "Germany", "Spain"])
                    Gender = st.selectbox("–ü–æ–ª", ["Male", "Female"])
                with col2:
                    Tenure = st.slider("–°—Ä–æ–∫ –≤ –±–∞–Ω–∫–µ (–ª–µ—Ç)", 0, 10, 5)
                    Balance = st.number_input("–ë–∞–ª–∞–Ω—Å", 0.0, 250000.0, 75000.0)
                    NumOfProducts = st.slider("–ö–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", 1, 4, 1)
                with col3:
                    HasCrCard = st.radio("–ï—Å—Ç—å –∫—Ä–µ–¥. –∫–∞—Ä—Ç–∞?", [1, 0], format_func=lambda x: "–î–∞" if x == 1 else "–ù–µ—Ç")
                    IsActiveMember = st.radio("–ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç?", [1, 0],
                                              format_func=lambda x: "–î–∞" if x == 1 else "–ù–µ—Ç")
                    EstimatedSalary = st.number_input("–ü—Ä–µ–¥–ø. –∑/–ø", 0.0, 200000.0, 100000.0)
                submitted = st.form_submit_button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")

            if submitted:
                input_data_dict = {'CreditScore': CreditScore, 'Age': Age, 'Tenure': Tenure, 'Balance': Balance,
                                   'NumOfProducts': NumOfProducts, 'HasCrCard': HasCrCard,
                                   'IsActiveMember': IsActiveMember,
                                   'EstimatedSalary': EstimatedSalary, 'France': 1 if Geography == 'France' else 0,
                                   'Germany': 1 if Geography == 'Germany' else 0,
                                   'Spain': 1 if Geography == 'Spain' else 0,
                                   'Female': 1 if Gender == 'Female' else 0, 'Male': 1 if Gender == 'Male' else 0}
                input_df = pd.DataFrame([input_data_dict])
                input_df_featured = engineer_features(input_df)
                input_df_reordered = input_df_featured.reindex(columns=st.session_state.X_columns, fill_value=0)
                input_df_reordered[st.session_state.numerical_cols] = st.session_state.scaler.transform(
                    input_df_reordered[st.session_state.numerical_cols])

                prediction_proba = st.session_state.model.predict_proba(input_df_reordered)[0][1]

                if prediction_proba > 0.55:  # –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–Ω–∏–º–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª—å—à–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —É—Ö–æ–¥–µ
                    st.error(f"–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞: **{prediction_proba:.1%}**", icon="üö®")
                elif prediction_proba > 0.4:
                    st.warning(f"–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞: **{prediction_proba:.1%}**", icon="‚ö†Ô∏è")
                else:
                    st.success(f"–ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞: **{prediction_proba:.1%}**", icon="‚úÖ")
        else:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")